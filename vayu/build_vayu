#!/usr/bin/env bash
# Docker Kernel Build Script

# Cloning some resource
if [[ "$*" =~ "beta" ]]; then
  BETA=-beta
  git clone --depth=1 https://github.com/XSans02/halcyon_kernel_xiaomi_sdm660.git -b eas-12-bpf kernel
  cd kernel || exit
elif [[ "$*" =~ "stable" ]]; then
  git clone --depth=1 https://github.com/XSans02/kernel_vayu.git -b stable kernel
  cd kernel || exit
fi

if [[ "$*" =~ "clang" ]]; then
  git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang
elif [[ "$*" =~ "gcc" ]]; then
  git clone --depth=1 https://github.com/okta-10/gcc-arm64.git arm64
  git clone --depth=1 https://github.com/okta-10/gcc-arm32.git arm32
fi

git clone --depth=1 https://github.com/XSans02/telegram.sh.git Telegram
git clone --depth=1 https://github.com/XSans02/AnyKernel3.git -b vayu ak3

# Setup Environtment
KERNEL_DIR=$PWD
KERNEL_IMG=$KERNEL_DIR/out/arch/arm64/boot/Image
KERNEL_DTBO=$KERNEL_DIR/out/arch/arm64/boot/dtbo.img
DTB=y
LOCALVERSION="$BETA"-Rev1.0
DEVICE=vayu
AK3_DIR=$KERNEL_DIR/ak3/
export TZ="Asia/Jakarta"
ZIP_DATE=$(TZ=Asia/Jakarta date +'%d%m%Y')
SOURCE="$(git rev-parse --abbrev-ref HEAD)"
COMMIT=$(git log --pretty=format:'%s' -1)

# Toolchain setup
if [[ "$*" =~ "clang" ]]; then
  TC_DIR=clang
  CLANG_DIR="$KERNEL_DIR/clang"
  export PATH="$KERNEL_DIR/clang/bin:$PATH"
  KBUILD_COMPILER_STRING="$("$CLANG_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
elif [[ "$*" =~ "gcc" ]]; then
  TC_DIR=gcc
  GCC_DIR="$KERNEL_DIR/arm64"
  KBUILD_COMPILER_STRING=$("$GCC_DIR"/bin/aarch64-elf-gcc --version | head -n 1)
fi

export ZIP_DATE
export SOURCE
export KBUILD_BUILD_USER="XSans02"
export KBUILD_BUILD_HOST="CircleCI-Server"
export LOCALVERSION
export KBUILD_COMPILER_STRING

# Telegram
TELEGRAM=Telegram/telegram
sendInfo() {
  "${TELEGRAM}" -c "${CHANNEL_ID}" -H -D \
      "$(
          for POST in "${@}"; do
              echo "${POST}"
          done
      )"
}

sendKernel() {
  "${TELEGRAM}" -f "$(echo "$AK3_DIR"/*.zip)" \
  -c "${CHANNEL_ID}" -H \
      "# <code>$DEVICE</code> # <code>md5: $(md5sum "$AK3_DIR"/*.zip | cut -d' ' -f1)</code> # <code>Build Took : $(("$DIFF" / 60)) Minute, $(("$DIFF" % 60)) Second</code>"
}

sendInfo "<b>Start Building :</b> <code>Waifu Kernel</code>" \
          "<b>Source Branch :</b> <code>$SOURCE</code>"

# Start Count
BUILD_START=$(date +"%s")

# Start Compile
make O=out ARCH=arm64 "$DEVICE"_defconfig

if [[ "$TC_DIR" == "clang" ]]; then
  make -j"$(nproc --all)" O=out \
          ARCH=arm64 \
          SUBARCH=arm64 \
          LD_LIBRARY_PATH="${CLANG_DIR}/lib64:${LD_LIBRARY_PATH}" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          AR=llvm-ar \
          NM=llvm-nm \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          STRIP=llvm-strip \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu-
elif [[ "$TC_DIR" == "gcc" ]]; then
  export CROSS_COMPILE="$KERNEL_DIR/arm64/bin/aarch64-elf-"
  export CROSS_COMPILE_ARM32="$KERNEL_DIR/arm32/bin/arm-eabi-"
  make -j"$(nproc --all)" O=out ARCH=arm64
fi

# If build error
if ! [ -a "$KERNEL_IMG" ]; then
  sendInfo "<b>Failed building kernel for <code>$DEVICE</code> Please fix it...!</b>"
  exit 1
fi

# End Count and Calculate Total Build Time
BUILD_END=$(date +"%s")
DIFF=$(( BUILD_END - BUILD_START ))

LINUX_VERSION=$(cat < out/.config | grep Linux/arm64 | cut -d " " -f3)

# Make zip
cp -r "$KERNEL_IMG" "$AK3_DIR"/
cp -r "$KERNEL_DTBO" "$AK3_DIR"/

if [[ "$DTB" == "y" ]];then
  ( find "$KERNEL_DIR/out/arch/arm64/boot/dts/qcom" -name "*.dtb" -exec cat {} + > $AK3_DIR/dtb )
  [[ ! -e "$AK3_DIR/dtb" ]] && [[ ! -z "sm8150-v2" ]] && cp $KERNEL_DIR/out/arch/arm64/boot/dts/qcom/sm8150 $AK3_DIR/dtb
fi
cd "$AK3_DIR" || exit

if [[ "$*" =~ "beta" ]]; then
  zip -r9 Waifu-EiChan-"$LOCALVERSION"_"$ZIP_DATE".zip ./*
else
  zip -r9 Waifu-Eichan-"$LOCALVERSION"_"$ZIP_DATE".zip ./*
fi

cd "$KERNEL_DIR" || exit

sendKernel
sendInfo "<b>Success Building :</b> <code>Waifu Kernel</code>" \
          "<b>Linux Version :</b> <code>$LINUX_VERSION</code>" \
          "<b>Build Date :</b> <code>$(date +"%A, %d %b %Y, %H:%M:%S")</code>" \
          "<b>Toolchain :</b> <code>$KBUILD_COMPILER_STRING</code>" \
          "<b>Last Commit :</b> <code>$COMMIT</code>"
