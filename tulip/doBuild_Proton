#! /bin/bash

# Kernel building script with proton clang

# Function to show an informational message
msg() {
    echo -e "\e[1;32m$*\e[0m"
}

err() {
    echo -e "\e[1;41m$*\e[0m"
    exit 1
}

# Cloning kernel source
if [[ "$*" =~ "stable" ]]; then
  git clone --depth=1 https://github.com/XSans02/kernel_sdm660.git -b eas kernel
  cd kernel || exit
elif [[ "$*" =~ "beta" ]]; then
  git clone --depth=1 https://github.com/XSans02/kernel_sdm660.git -b eas-test kernel
  cd kernel || exit
fi

# Cam Version
if [[ "$*" =~ "oldcam" ]]; then
    CAMVERSION=oldcam
elif [[ "$*" =~ "newcam" ]]; then
    CAMVERSION=newcam
fi

# Setup overclock version
if [[ "$*" =~ "oc" ]]; then
     LOCALVERSION=OC-Rev1.1
     export LOCALVERSION
else
     LOCALVERSION=Rev1.1
     export LOCALVERSION
fi


##------------------------------------------------------##
##----------Basic Informations, COMPULSORY--------------##

# The defult directory where the kernel should be placed
KERNEL_DIR=$PWD

# Devices variable
ZIPNAME="Waifu-EiChan-EAS"
DEVICE="tulip"
DEFCONFIG=$DEVICE-$CAMVERSION_defconfig

# EnvSetup
KBUILD_BUILD_USER=XSans02
KBUILD_BUILD_HOST=CircleCI
CHATID=${CHANNEL_ID}
ZIP_DATE=$(TZ=Asia/Jakarta date +'%d%m%Y')
export KBUILD_BUILD_HOST
export KBUILD_BUILD_USER
export ZIP_DATE

export KBUILD_BUILD_VERSION=$CIRCLE_BUILD_NUMBER
export CI_BRANCH==$(git rev-parse --abbrev-ref HEAD)

# Check Kernel Version
KERVER=$(make kernelversion)

# Set a commit head
COMMIT_HEAD=$(git log --oneline -1)

##-----------------------------------------------------##

clone() {
	echo " "
	msg "|| Cloning Clang ||"
	git clone --depth=1 https://github.com/kdrag0n/proton-clang clang-llvm --no-tags --single-branch

	# Toolchain Directory defaults to clang-llvm
	TC_DIR=$KERNEL_DIR/clang-llvm

	msg "|| Cloning Anykernel ||"
	git clone --depth 1 --no-single-branch https://github.com/XSans02/AnyKernel3.git -b master
}

##------------------------------------------------------##

exports() {
	export ARCH=arm64
	export SUBARCH=arm64
	export token=$TELEGRAM_TOKEN

	KBUILD_COMPILER_STRING=$("$TC_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
	PATH=$TC_DIR/bin/:$PATH

	export PATH KBUILD_COMPILER_STRING
	export BOT_MSG_URL="https://api.telegram.org/bot$token/sendMessage"
	export BOT_BUILD_URL="https://api.telegram.org/bot$token/sendDocument"
	PROCS=$(nproc --all)
	export PROCS
}

##---------------------------------------------------------##

tg_post_msg() {
	curl -s -X POST "$BOT_MSG_URL" -d chat_id="$2" \
	-d "disable_web_page_preview=true" \
	-d "parse_mode=html" \
	-d text="$1"

}

##----------------------------------------------------------------##

tg_post_build() {
	curl --progress-bar -F document=@"$1" "$BOT_BUILD_URL" \
	-F chat_id="$2"  \
	-F "disable_web_page_preview=true" \
	-F "parse_mode=html" \
	-F caption="$3 | <code>Build Number : </code><b>$CIRCLE_BUILD_NUMBER</b>"
}

##----------------------------------------------------------##

build_kernel() {

 	tg_post_msg "<b>üî® $KBUILD_BUILD_VERSION CI Build Triggered</b>%0A<b>Kernel Version : </b><code>$KERVER</code>%0A<b>Date : </b><code>$(TZ=Asia/Jakarta date)</code>%0A<b>Compiler Used : </b><code>$KBUILD_COMPILER_STRING</code>%0a<b>Branch : </b><code>$CI_BRANCH</code>" "$CHATID"

 	make O=out $DEFCONFIG

	msg "|| Started Compilation ||"
	BUILD_START=$(date +"%s")
	make -j"$PROCS" O=out \
                ARCH=arm64 \
		CC=clang \
		AR=llvm-ar \
		NM=llvm-nm \
	        OBJCOPY=llvm-objcopy \
		OBJDUMP=llvm-objdump \
		STRIP=llvm-strip \
		CROSS_COMPILE=aarch64-linux-gnu- \
		CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	BUILD_END=$(date +"%s")
	DIFF=$((BUILD_END - BUILD_START))

		if [ -f "$KERNEL_DIR"/out/arch/arm64/boot/Image.gz-dtb ]
	    then
	    	msg "|| Kernel successfully compiled ||"
			gen_zip
		else
		tg_post_msg "<b>‚ùå Build failed to compile after $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds</b>" "$CHATID"
		fi

}

##--------------------------------------------------------------##

gen_zip() {
	msg "|| Zipping into a flashable zip ||"
	cp "$KERNEL_DIR"/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
	cd AnyKernel3 || exit
	zip -r9 $ZIPNAME-$DEVICE-$CAMVERSION-$LOCALVERSION-$ZIP_DATE_$CIRCLE_BUILD_NUMBER ./* -x .git README.md

	## Prepare a final zip variable
	ZIP_FINAL="$ZIPNAME-$DEVICE-$CAMVERSION-$LOCALVERSION-$ZIP_DATE_$CIRCLE_BUILD_NUMBER.zip"
	tg_post_build "$ZIP_FINAL" "$CHATID" "‚úÖ Build took : $((DIFF / 60)) minute(s) and $((DIFF % 60)) second(s)"
	cd ..
	rm -rf AnyKernel3
}

clone
exports
build_kernel

##----------------*****-----------------------------##
