#!/bin/bash
# Don't change everything after this

if [[ "$*" =~ "stable" ]]; then
   git clone --depth=1 https://github.com/XSans02/kernel_sdm660 -b eas .
fi

# Export Line

export KERNELNAME=Waifu-EiChan-EAS

export LOCALVERSION=Rev1.0

export KBUILD_BUILD_USER=XSans

export KBUILD_BUILD_HOST=CircleCI

export TOOLCHAIN=clang

export DEVICES=tulip

export CI_ID=-1001469789020

export BOT_TOKEN=2024574930:AAGyq7vgjt7EhIdQxizYD_YkKjPp2JvAiAw

DATE=$(date +"%Y%m%d-%H%M")

make_build(){
	print "Make kernel dtb..." green
	if [ $TOOLCHAIN == clang ]; then
		export KBUILD_COMPILER_STRING=$(clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
		PATH="$(pwd)/clang/bin:${PATH}"
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out \
				ARCH=arm64 \
				CC=clang \
				AR=llvm-ar \
				NM=llvm-nm \
				OBJCOPY=llvm-objcopy \
				OBJDUMP=llvm-objdump \
				STRIP=llvm-strip \
				CROSS_COMPILE=aarch64-linux-gnu- \
				CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	else
		export CROSS_COMPILE=$(pwd)/gcc64/bin/aarch64-elf-
		export CROSS_COMPILE_ARM32=$(pwd)/gcc32/bin/arm-eabi-
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out ARCH=arm64
	fi
}

make_clean(){
	rm -rf out
}

send_msg(){
	print "${1}" green
	curl -s -X POST https://api.telegram.org/bot"${BOT_TOKEN}"/sendMessage \
		-d parse_mode="Markdown" \
		-d chat_id="${CI_ID}" \
		-d text="${1}"
}

send_file(){
	print "Sending file..." green
	curl -F chat_id="${CI_ID}" \
		-F caption="<b>✅ Build succesfully!</b>%0A<b>DEVICE:</b> <code>${type}</code>%0A<b>Linux version:</b> <code>$(make kernelversion)</code>%0A<b>Compiler:</b> <code>$KBUILD_COMPILER_STRING</code>" \
		-F document=@"${1}" \
		 https://api.telegram.org/bot"${BOT_TOKEN}"/sendDocument
}

mkzip(){
	print "Generate zip file..." green

	if [ -f $(pwd)/out/arch/arm64/boot/Image.gz-dtb ]; then
		cp $(pwd)/out/arch/arm64/boot/Image.gz-dtb  anykernel
		cd anykernel
		zip -r9 ../$1 * -x .git README.md *placeholder
		cd ..
		send_file $1
	else
		send_msg "❌ Build error ... Check Log Please"
		exit 1
	fi
}

print(){
	echo ""
	case ${2} in
		"red")
		echo -e "\033[31m $1 \033[0m";;
		"green")
		echo -e "\033[32m $1 \033[0m";;
		*)
		echo $1
		;;
	esac
}

gen_toolchain(){
	print "Cloning toolchain files..." green
	if [ $TOOLCHAIN == "clang" ]
	then
		git clone --depth=1 https://github.com/kdrag0n/proton-clang clang
	else
		git clone --depth=1 https://github.com/chips-project/aarch64-elf gcc64
		git clone --depth=1 https://github.com/chips-project/arm-eabi gcc32
	fi
	git clone --depth=1 https://github.com/XSans02/AnyKernel3.git anykernel
}

build(){

	export type="${1} ${2} ${3}"

	make_clean

	if [ $2 == "-oldcam" ]
	then
		make_build "${1}_defconfig"
	else
		make_build "${1}-newcam_defconfig"
	fi
		mkzip "$KERNELNAME-$LOCALVERSION-${1}${2}${3}-$DATE.zip"
}

gen_toolchain

send_msg "<b>⏳ Start building:</b> <code>${KERNELNAME}-${LOCALVERSION}</code>%0A<b>Device:</b> <code>$DEVICES</code>%0A<b>Linux version:</b> <code>$(make kernelversion)</code>%0A<b>Compiler:</b> <code>$KBUILD_COMPILER_STRING</code>"

START=$(date +"%s")

for i in ${DEVICES//,/ }
do
	build ${i} -oldcam

	build ${i} -newcam
done

send_msg "<b>⏳ Start building Overclock version</b>"

https://raw.githubusercontent.com/XSans02/CI_Script/main/tulip/oc.patch

git apply oc.patch

https://raw.githubusercontent.com/XSans02/CI_Script/main/tulip/em.patch

git apply em.patch

for i in ${DEVICES//,/ }
do
	if [ $i == "tulip" ]
	then
		build ${i} -oldcam -overclock

		build ${i} -newcam -overclock
	fi
done

END=$(date +"%s")

DIFF=$(( END - START ))

send_msg "✅ Build completed in $((DIFF / 60))m $((DIFF % 60))s
