#!/bin/bash

export KERNELNAME=Waifu-EiChan-EAS
export REVISION=Rev1.2
export KBUILD_BUILD_USER=XSans
export KBUILD_BUILD_HOST=CircleCI
export TOOLCHAIN=clang
export DEVICES=tulip
export CHATID=${CHANNEL_ID}
export BOT_MSG_URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage"
export BOT_BUILD_URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendDocument"
export DATE=$(date +"%Y%m%d-%H%M")

make_build(){
	print "Make kernel dtb..." green
    
    START=$(date +"%s")
    
	if [ $TOOLCHAIN == clang ]; then
		PATH="$(pwd)/clang/bin:${PATH}"
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out \
				ARCH=arm64 \
				CC=clang \
				AR=llvm-ar \
				NM=llvm-nm \
				OBJCOPY=llvm-objcopy \
				OBJDUMP=llvm-objdump \
				STRIP=llvm-strip \
				CROSS_COMPILE=aarch64-linux-gnu- \
				CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	else
		export CROSS_COMPILE=$(pwd)/gcc64/bin/aarch64-elf-
		export CROSS_COMPILE_ARM32=$(pwd)/gcc32/bin/arm-eabi-
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out ARCH=arm64
	fi
    
    END=$(date +"%s")
      
    DIFF=$(( END - START ))
}

make_clean(){
	rm -rf out
}

send_msg(){
	curl -s -X POST "$BOT_MSG_URL" -d chat_id="$2" \
	-d "disable_web_page_preview=true" \
	-d "parse_mode=html" \
	-d text="$1"
}

send_file(){
	#Post MD5Checksum alongwith for easeness
	MD5CHECK=$(md5sum "$1" | cut -d' ' -f1)

	#Show the Checksum alongwith caption
	curl --progress-bar -F document=@"$1" "$BOT_BUILD_URL" \
	-F chat_id="$2"  \
	-F "disable_web_page_preview=true" \
	-F "parse_mode=html" \
	-F caption="<b>‚úÖ Build successfully!</b>%0A<b>Build took : </b><code>$((DIFF / 60)) minute and $((DIFF % 60)) second</code>%0A<b>Build date : </b><code>$DATE</code>%0A<b>MD5 Checksum : </b><code>$MD5CHECK</code>" "$CHATID"
}

mkzip(){
	print "Generate zip file..." green

	if [ -f $(pwd)/out/arch/arm64/boot/Image.gz-dtb ]; then
	
		cp $(pwd)/out/arch/arm64/boot/Image.gz-dtb anykernel
		cd anykernel
		zip -r9 ../$1 * -x .git README.md *placeholder
		cd ..
		send_file $1
	else
		send_msg "<b>‚ùå Build error! ...Please cek log for fix</b>"
		print "‚ùå Build error!" red
		exit 1
	fi
}

print(){
	echo ""
	case ${2} in
		"red")
		echo -e "\033[31m $1 \033[0m";;
		"green")
		echo -e "\033[32m $1 \033[0m";;
		*)
		echo $1
		;;
	esac
}

gen_toolchain(){
	print "Cloning toolchain files..." green
	if [ $TOOLCHAIN == "clang" ]
	then
		git clone --depth=1 https://github.com/kdrag0n/proton-clang clang
	else
		git clone --depth=1 https://github.com/chips-project/aarch64-elf gcc64
		git clone --depth=1 https://github.com/chips-project/arm-eabi gcc32
	fi
	git clone --depth=1 https://github.com/XSans02/AnyKernel3.git anykernel
}

build(){

	export type="${1} ${2} ${3}"

	make_clean

	if [ $2 == "-oldcam" ]
	then
		make_build "${1}_defconfig"
	else
		make_build "${1}-newcam_defconfig"
	fi
		mkzip "$KERNELNAME-$LOCALVERSION-${1}${2}${3}_$DATE.zip"
}

if [[ "$*" =~ "oldcam" ]]; then
      gen_toolchain
      
      export LOCALVERSION=Oldcam-${REVISION}
      export KBUILD_COMPILER_STRING="$("$(pwd)"clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"

      send_msg "<b>üõ†Ô∏è Start building...</b>%0A<b>Kernel : </b><code>$KERNELNAME-$DEVICES-$LOCALVERSION</code>%0A<b>Linux version : </b><code>$(make kernelversion)</code>%0A<b>Compiler : </b><code>$KBUILD_COMPILER_STRING</code>%0A<b>Branch : </b><code>${CIRCLE_BRANCH}</code>%0A<b>Build number : </b><code>${CIRCLE_BUILD_NUM}</code>%0A<b>Last commit: </b><code>$(git log --oneline -1)</code>" "$CHATID"

      for i in ${DEVICES//,/ }
      do

        	build ${i} -oldcam

      done

      gen_toolchain

      send_msg "üõ†Ô∏è Start building OC version..." "$CHATID"
       
      export LOCALVERSION=Oldcam-OC-${REVISION}

      git apply oc.patch

      git apply em.patch

      for i in ${DEVICES//,/ }
       do
        	if [ $i == "tulip" ]
        	then

        		build ${i} -oldcam -overclock

        	fi
       done
elif [[ "$*" =~ "newcam" ]]; then
      gen_toolchain
      
      export LOCALVERSION=Newcam-${REVISION}

      send_msg "<b>üõ†Ô∏è Start building...</b>%0A<b>Kernel : </b><code>$KERNELNAME-$DEVICES-$LOCALVERSION</code>%0A<b>Linux version : </b><code>$(make kernelversion)</code>%0A<b>Compiler : </b><code>$KBUILD_COMPILER_STRING</code>%0A<b>Branch : </b><code>${CIRCLE_BRANCH}</code>%0A<b>Build number : </b><code>${CIRCLE_BUILD_NUM}</code>%0A<b>Last commit: </b><code>$(git log --oneline -1)</code>" "$CHATID"

      for i in ${DEVICES//,/ }
      do

        	build ${i} -newcam
      done

      gen_toolchain

      send_msg "üõ†Ô∏è Start building Overclock version..." "$CHATID"
       
      export LOCALVERSION=Newcam-OC-${REVISION}

      git apply oc.patch

      git apply em.patch

      for i in ${DEVICES//,/ }
       do
        	if [ $i == "tulip" ]
        	then

        		build ${i} -newcam -overclock
        	fi
       done
fi
