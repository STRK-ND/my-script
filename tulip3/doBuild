#!/usr/bin/env bash

# Cloning some resource
if [[ "$*" =~ "stable" ]]; then
  git clone --depth=1 https://github.com/XSans02/kernel_sdm660.git -b eas kernel
  cd kernel || exit
elif [[ "$*" =~ "beta" ]]; then
  git clone --depth=1 https://github.com/XSans02/kernel_sdm660.git -b eas-test kernel
  cd kernel || exit
fi

# Cam Version
if [[ "$*" =~ "oldcam" ]]; then
    CAMVERSION=oldcam
elif [[ "$*" =~ "newcam" ]]; then
    CAMVERSION=newcam
fi

if [[ "$*" =~ "clang" ]]; then
  git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang
elif [[ "$*" =~ "gcc" ]]; then
  git clone --depth=1 https://github.com/chips-project/aarch64-elf arm64
  git clone --depth=1 https://github.com/chips-project/arm-eabi arm32
fi

if [[ "$*" =~ "clang" ]]; then
  TOOLCHAIN_DIR="clang"
  CCV="$("$TOOLCHAIN_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
  LDV="$("$TOOLCHAIN_DIR"/bin/ld.lld --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
  KBUILD_COMPILER_STRING="$CCV + $LDV"
elif [[ "$*" =~ "gcc" ]]; then
  TOOLCHAIN_DIR="arm64"
  KBUILD_COMPILER_STRING=$("$TOOLCHAIN_DIR"/bin/aarch64-elf-gcc --version | head -n 1)
fi

git clone --depth=1 https://github.com/XSans02/telegram.sh.git Telegram
git clone --depth=1 https://github.com/XSans02/AnyKernel3.git AnyKernel

# Setup Environtment
KERNEL_DIR=$PWD
KERNEL_IMG=$KERNEL_DIR/out/arch/arm64/boot/Image.gz-dtb
DEVICE=tulip
AK3_DIR=$KERNEL_DIR/AnyKernel/
export TZ="Asia/Jakarta"
ZIP_DATE=$(TZ=Asia/Jakarta date +'%d%m%Y')
SOURCE="$(git rev-parse --abbrev-ref HEAD)"
COMMIT=$(git log --pretty=format:'%s' -1)

if [[ "$*" =~ "clang" ]]; then
  # Kernel & Clang Setup
  CLANG_DIR="$KERNEL_DIR/clang"
  export PATH="$KERNEL_DIR/clang/bin:$PATH"
  KBUILD_COMPILER_STRING="$("$CLANG_DIR"/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
  export KBUILD_COMPILER_STRING
fi

export ZIP_DATE
export SOURCE
export ARCH=arm64
export SUBARCH=arm64
export LOCALVERSION=Rev1.1
export KBUILD_BUILD_USER="XSans02"
export KBUILD_BUILD_HOST="CircleCI"

# Telegram
TELEGRAM=Telegram/telegram
sendInfo() {
  "${TELEGRAM}" -c "${CHANNEL_ID}" -H -D \
      "$(
          for POST in "${@}"; do
              echo "${POST}"
          done
      )"
}

sendKernel() {
  "${TELEGRAM}" -f "$(echo "$AK3_DIR"/*.zip)" \
  -c "${CHANNEL_ID}" -H \
      "# <code>$DEVICE</code> # <code>md5: $(md5sum "$AK3_DIR"/*.zip | cut -d' ' -f1)</code> # <code>Build Took : $(("$DIFF" / 60)) Minute, $(("$DIFF" % 60)) Second</code>"
}

sendInfo  "<b>=================================</b>" \
          "<b>Start Building :</b> <code>Waifu Kernel</code>" \
          "<b>Source Branch :</b> <code>$SOURCE</code>" \
          "<b>=================================</b>"

# Start Count
BUILD_START=$(date +"%s")

make O=out "$DEVICE"-"$CAMVERSION"_defconfig
# Start Compile
if [[ "$*" =~ "clang" ]]; then
  make -j"$(nproc --all)" O=out \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi-
elif [[ "$*" =~ "gcc" ]]; then
  export CROSS_COMPILE="$KERNEL_DIR/arm64/bin/aarch64-elf-"
  export CROSS_COMPILE_ARM32="$KERNEL_DIR/arm32/bin/arm-eabi-"
  make -j"$(nproc --all)" O=out ARCH=arm64
fi

# If build error
if ! [ -a "$KERNEL_IMG" ]; then
  sendInfo "<b>Failed building kernel for <code>$DEVICE</code> Please fix it...!</b>"
  exit 1
fi

# End Count and Calculate Total Build Time
BUILD_END=$(date +"%s")
DIFF=$(( BUILD_END - BUILD_START ))

LINUX_VERSION=$(cat < out/.config | grep Linux/arm64 | cut -d " " -f3)

# Make zip
cp -r "$KERNEL_IMG" "$AK3_DIR"/
cd "$AK3_DIR" || exit

if [[ "$*" =~ "beta" ]]; then
  zip -r9 Waifu-EiChan-EAS-"$DEVICE"_"$CAMVERSION"_beta_"$ZIP_DATE".zip ./*
else
  zip -r9 Waifu-EiChan-EAS-"$DEVICE"_"$CAMVERSION"_"$ZIP_DATE".zip ./*
fi

cd "$KERNEL_DIR" || exit

sendKernel

rm -rf out/arch/arm64/boot/
rm -rf out/.version
rm -rf "$AK3_DIR"/*.zip

sendInfo  "<b>======================================</b>" \
          "<b>Success Building :</b> <code>Waifu Kernel</code>" \
          "<b>Camversion :<b> <code>$CAMVERSION</code>" \
          "<b>Linux Version :</b> <code>$LINUX_VERSION</code>" \
          "<b>Build Date :</b> <code>$(date +"%A, %d %b %Y, %H:%M:%S")</code>" \
          "<b>Toolchain :</b> <code>$KBUILD_COMPILER_STRING</code>" \
          "<b>Last Commit :</b> <code>$COMMIT</code>" \
          "<b>======================================</b>"
