#!/usr/bin/env bash
# Copyright Â©2021 - 2022 XSans02

# Setup ENV Variable for CI ( You need all ENV for starting )
# > TELEGRAM_TOKEN
# > CHANNEL_ID
# > LLVM_NAME
# > GH_USERNAME
# > GH_EMAIL
# > GH_TOKEN
# > GH_PUSH_REPO_URL
# > TYPE

# Function to show an informational message
msg() {
    echo -e "\e[1;32m$*\e[0m"
}

err() {
    echo -e "\e[1;41m$*\e[0m"
}

# Set a directory
DIR="$(pwd ...)"

# Telegram message setup
git clone --depth=1 https://github.com/XSans02/Telegram Telegram

TELEGRAM=Telegram/telegram
sendInfo() {
  "${TELEGRAM}" -c "${CHANNEL_ID}" -H -D \
      "$(
          for POST in "${@}"; do
              echo "${POST}"
          done
      )"
}

# Build Info
rel_date="$(date "+%Y%m%d")" # ISO 8601 format
rel_friendly_date="$(date "+%B %-d, %Y")" # "Month day, year" format
builder_branch="$(git rev-parse --abbrev-ref HEAD)"
builder_commit="$(git log --pretty=format:'%s' -1)"
builder_commit2="$(git rev-parse HEAD)"

# Send message to TG
sendInfo "<b>Toolchain Compilation Started</b>" \
         "<b>Date : </b><code>$rel_friendly_date</code>" \
	 "<b>Script Branch : </b><code>$builder_branch</code>" \
	 "<b>Script Commit : </b><code>$builder_commit</code>"
	 
# Start Count
BUILD_START="$(date +"%s")"

if [[ "${TYPE}" == "default" ]]; then
	# Build LLVM
	msg "$LLVM_NAME: Building LLVM..."
	sendInfo 	"<b>$LLVM_NAME: </b><code>Building LLVM. . .</code>" \
				"<b>Build Type: </b><code>$TYPE</code>"

	./build-llvm.py \
		--clang-vendor "$LLVM_NAME" \
		--projects "clang;lld;polly" \
		--targets "ARM;AArch64" \
		--shallow-clone \
		--incremental \
		--no-ccache \
		--build-type "Release" 2>&1 | tee build.log
elif [[ "${TYPE}" == "default-lto" ]]; then
	# Build LLVM
	msg "$LLVM_NAME: Building LLVM..."
	sendInfo 	"<b>$LLVM_NAME: </b><code>Building LLVM. . .</code>" \
				"<b>Build Type: </b><code>$TYPE</code>"

	./build-llvm.py \
		--clang-vendor "$LLVM_NAME" \
		--projects "clang;lld;polly" \
		--targets "ARM;AArch64" \
		--shallow-clone \
		--incremental \
		--no-ccache \
		--lto "thin" \
		--build-type "Release" 2>&1 | tee build.log
elif [[ "${TYPE}" == "gr" ]]; then
	# Build LLVM
	msg "$LLVM_NAME: Building LLVM..."
	sendInfo 	"<b>$LLVM_NAME: </b><code>Building LLVM. . .</code>" \
				"<b>Build Type: </b><code>$TYPE</code>"

	./build-llvm.py \
		--clang-vendor "$LLVM_NAME" \
		--projects "clang;lld;polly" \
		--targets "ARM;AArch64" \
		--use-good-revision \
		--incremental \
		--no-ccache \
		--build-type "Release" 2>&1 | tee build.log
elif [[ "${TYPE}" == "gr-lto" ]]; then
	# Build LLVM
	msg "$LLVM_NAME: Building LLVM..."
	sendInfo 	"<b>$LLVM_NAME: </b><code>Building LLVM. . .</code>" \
				"<b>Build Type: </b><code>$TYPE</code>"

	./build-llvm.py \
		--clang-vendor "$LLVM_NAME" \
		--projects "clang;lld;polly" \
		--targets "ARM;AArch64" \
		--use-good-revision \
		--incremental \
		--no-ccache \
		--lto "thin" \
		--build-type "Release" 2>&1 | tee build.log
fi

# Check if the final clang binary exists or not.
[ ! -f install/bin/clang-1* ] && {
	err "Building LLVM failed ! Kindly check errors !!"
    sendInfo "<b>$LLVM_NAME: <\b><code>Building failed, please fix it!</code>"
	exit 1
}

# Build binutils
msg "$LLVM_NAME: Building binutils..."
sendInfo "<b>$LLVM_NAME: </b><code>Building Binutils. . .</code>"
./build-binutils.py --targets arm aarch64

# Remove unused products
rm -fr install/include
rm -f install/lib/*.a install/lib/*.la

# Strip remaining products
for f in $(find install -type f -exec file {} \; | grep 'not stripped' | awk '{print $1}'); do
	strip -s "${f: : -1}"
done

# Set executable rpaths so setting LD_LIBRARY_PATH isn't necessary
for bin in $(find install -mindepth 2 -maxdepth 3 -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
	# Remove last character from file output (':')
	bin="${bin: : -1}"

	echo "$bin"
	patchelf --set-rpath "$DIR/install/lib" "$bin"
done

# Release Info
pushd llvm-project || exit
llvm_commit="$(git log --pretty=format:'%s' -1)"
llvm_commit2="$(git rev-parse HEAD)"
short_llvm_commit="$(cut -c-8 <<< "$llvm_commit2")"
popd || exit

llvm_commit_url="https://github.com/llvm/llvm-project/commit/$short_llvm_commit"
binutils_ver="$(ls | grep "^binutils-" | sed "s/binutils-//g")"
clang_version="$(install/bin/clang --version | head -n1 | cut -d' ' -f4)"

# Push to GitHub
# Update Git repository
git config --global user.name $GH_USERNAME
git config --global user.email $GH_EMAIL
git clone "https://$GH_USERNAME:$GH_TOKEN@$GH_PUSH_REPO_URL" rel_repo
rm -rf "$DIR"/rel_repo/*
pushd rel_repo || exit
rm -fr ./*
cp -r ../install/* .
git checkout README.md # keep this as it's not part of the toolchain itself
git add .
git commit -asm "Bump to $rel_date build

LLVM commit: $llvm_commit_url
Clang Version: $clang_version
Binutils version: $binutils_ver
Builder commit: https://$GH_PUSH_REPO_URL/commit/$builder_commit2"
git push -f
popd || exit

# End Count and Calculate Total Build Time
BUILD_END="$(date +"%s")"
DIFF="$(( BUILD_END - BUILD_START ))"

sendInfo "<b>Toolchain Compilation Finished</b>" \
         "<b>Build Took : </b><code>$(("$DIFF" / 60)) Minute, $(("$DIFF" % 60)) Second</code>" \
	 "<b>Clang Version : </b><code>$clang_version</code>" \
	 "<b>Binutils Version : </b><code>$binutils_ver</code>" \
	 "<b>LLVM Commit :</b><code>$llvm_commit</code>" \
	 "<b>LLVM Commit URL :</b>$llvm_commit_url" \
         "<b>Toolchain Pushed To : </b>https://$GH_PUSH_REPO_URL"